---
- name: Setup local kubeconfig
  hosts: master
  become: true

  tasks:
    - name: Wait for k3s cluster to be ready
      ansible.builtin.shell: |
        set -euo pipefail
        timeout 60 bash -c 'until kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get nodes >/dev/null 2>&1; do sleep 2; done'
      args:
        executable: /bin/bash
      run_once: true
      register: k3s_ready
      retries: 3
      delay: 5
      until: k3s_ready.rc == 0

    - name: Fetch kubeconfig from master node
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "/tmp/k3s.yaml"
        flat: true
      run_once: true

    - name: Rewrite server address in fetched kubeconfig to master IP
      ansible.builtin.replace:
        path: /tmp/k3s.yaml
        regexp: 'server: https://127\.0\.0\.1:6443'
        replace: "server: https://{{ hostvars[groups['master'][0]].ansible_host }}:6443"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Rename cluster to custom name in fetched kubeconfig
      ansible.builtin.shell: |
        set -euo pipefail
        # Replace default context, cluster, and user names with custom cluster name
        sed -i.bak \
          -e "s/name: default$/name: {{ cluster_name }}/g" \
          -e "s/cluster: default$/cluster: {{ cluster_name }}/g" \
          -e "s/user: default$/user: {{ cluster_name }}/g" \
          /tmp/k3s.yaml
      args:
        executable: /bin/bash
      become: false
      delegate_to: localhost
      run_once: true

    - name: Ensure local ~/.kube directory exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') + '/.kube' }}"
        state: directory
        mode: "0700"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Initialize local kubeconfig if missing
      ansible.builtin.copy:
        dest: "{{ lookup('env', 'HOME') + '/.kube/config' }}"
        content: ""
        mode: "0600"
        force: no
      become: false
      delegate_to: localhost
      run_once: true

    - name: Backup existing local kubeconfig
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') + '/.kube/config' }}"
        dest: "{{ lookup('env', 'HOME') + '/.kube/config.bak' }}"
        mode: "0600"
        remote_src: true
      become: false
      delegate_to: localhost
      run_once: true

    - name: Remove old cluster configuration to avoid certificate conflicts
      ansible.builtin.shell: |
        set -euo pipefail
        # Remove old context, cluster, and user entries with the same name
        # This ensures new certificates replace old ones after a cluster reset
        kubectl config delete-context {{ cluster_name }} || true
        kubectl config delete-cluster {{ cluster_name }} || true
        kubectl config delete-user {{ cluster_name }} || true
      args:
        executable: /bin/bash
      become: false
      delegate_to: localhost
      run_once: true
      ignore_errors: true

    - name: Merge k3s kubeconfig into local kubeconfig
      ansible.builtin.shell: |
        set -euo pipefail
        KUBECONFIG="{{ lookup('env', 'HOME') + '/.kube/config' }}:/tmp/k3s.yaml" kubectl config view --flatten > "{{ lookup('env', 'HOME') + '/.kube/config.new' }}"
        mv "{{ lookup('env', 'HOME') + '/.kube/config.new' }}" "{{ lookup('env', 'HOME') + '/.kube/config' }}"
      args:
        executable: /bin/bash
      become: false
      delegate_to: localhost
      run_once: true

    - name: Set current context to the new cluster
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl config use-context {{ cluster_name }}
      args:
        executable: /bin/bash
      become: false
      delegate_to: localhost
      run_once: true

