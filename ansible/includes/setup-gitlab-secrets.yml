---
- name: Setup GitLab Secrets
  hosts: localhost
  become: false
  connection: local
  gather_facts: false

  tasks:
    - name: Verify kubectl is available
      ansible.builtin.shell: |
        set -euo pipefail
        command -v kubectl >/dev/null 2>&1 || { echo "kubectl not found" >&2; exit 1; }
      args:
        executable: /bin/bash

    - name: Ensure GitLab namespace exists
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl get ns gitlab >/dev/null 2>&1 || kubectl create ns gitlab
      args:
        executable: /bin/bash

    - name: Check if GitLab initial root password secret already exists
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl get secret gitlab-initial-root-password -n gitlab >/dev/null 2>&1
      args:
        executable: /bin/bash
      register: root_password_exists
      ignore_errors: true
      changed_when: false

    - name: Generate secure random password for GitLab root
      ansible.builtin.shell: |
        set -euo pipefail
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
      args:
        executable: /bin/bash
      register: gitlab_root_password
      when: root_password_exists.rc != 0

    - name: Create GitLab initial root password secret
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl create secret generic gitlab-initial-root-password \
          --from-literal=password='{{ gitlab_root_password.stdout }}' \
          -n gitlab
      args:
        executable: /bin/bash
      when: root_password_exists.rc != 0

    - name: Display root password creation status
      ansible.builtin.debug:
        msg: "✓ Created GitLab root password secret"
      when: root_password_exists.rc != 0

    - name: Display root password exists status
      ansible.builtin.debug:
        msg: "✓ GitLab root password secret already exists (skipped)"
      when: root_password_exists.rc == 0

    - name: Check if PostgreSQL password secret already exists
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl get secret gitlab-postgresql-password -n gitlab >/dev/null 2>&1
      args:
        executable: /bin/bash
      register: postgres_password_exists
      ignore_errors: true
      changed_when: false

    - name: Generate secure random password for PostgreSQL
      ansible.builtin.shell: |
        set -euo pipefail
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
      args:
        executable: /bin/bash
      register: gitlab_postgres_password
      when: postgres_password_exists.rc != 0

    - name: Create PostgreSQL password secret
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl create secret generic gitlab-postgresql-password \
          --from-literal=password='{{ gitlab_postgres_password.stdout }}' \
          -n gitlab
      args:
        executable: /bin/bash
      when: postgres_password_exists.rc != 0

    - name: Display PostgreSQL password creation status
      ansible.builtin.debug:
        msg: "✓ Created PostgreSQL password secret"
      when: postgres_password_exists.rc != 0

    - name: Display PostgreSQL password exists status
      ansible.builtin.debug:
        msg: "✓ PostgreSQL password secret already exists (skipped)"
      when: postgres_password_exists.rc == 0

    - name: Check if Redis password secret already exists
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl get secret gitlab-redis-password -n gitlab >/dev/null 2>&1
      args:
        executable: /bin/bash
      register: redis_password_exists
      ignore_errors: true
      changed_when: false

    - name: Generate secure random password for Redis
      ansible.builtin.shell: |
        set -euo pipefail
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
      args:
        executable: /bin/bash
      register: gitlab_redis_password
      when: redis_password_exists.rc != 0

    - name: Create Redis password secret
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl create secret generic gitlab-redis-password \
          --from-literal=password='{{ gitlab_redis_password.stdout }}' \
          -n gitlab
      args:
        executable: /bin/bash
      when: redis_password_exists.rc != 0

    - name: Display Redis password creation status
      ansible.builtin.debug:
        msg: "✓ Created Redis password secret"
      when: redis_password_exists.rc != 0

    - name: Display Redis password exists status
      ansible.builtin.debug:
        msg: "✓ Redis password secret already exists (skipped)"
      when: redis_password_exists.rc == 0

    - name: Retrieve GitLab root password
      ansible.builtin.shell: |
        set -euo pipefail
        kubectl get secret gitlab-initial-root-password -n gitlab -o jsonpath='{.data.password}' | base64 -d
      args:
        executable: /bin/bash
      register: current_root_password
      no_log: false

    - name: Get GitLab URL
      ansible.builtin.shell: |
        set -euo pipefail
        INGRESS_IP=$(kubectl get configmap cluster-params -n flux-system -o jsonpath='{.data.INGRESS_IP}' 2>/dev/null || echo "UNKNOWN")
        echo "https://gitlab.${INGRESS_IP}.sslip.io"
      args:
        executable: /bin/bash
      register: gitlab_url
      ignore_errors: true

    - name: Display GitLab secrets setup complete
      ansible.builtin.debug:
        msg:
          - ""
          - "╔════════════════════════════════════════════════════════════════════════════╗"
          - "║                   GitLab Secrets Configuration                            ║"
          - "╚════════════════════════════════════════════════════════════════════════════╝"
          - ""
          - "✓ All GitLab secrets have been configured!"
          - ""
          - "GitLab URL: {{ gitlab_url.stdout }}"
          - "Registry URL: {{ gitlab_url.stdout | replace('gitlab.', 'registry.') }}"
          - ""
          - "GitLab Root Credentials:"
          - "  Username: root"
          - "  Password: {{ current_root_password.stdout }}"
          - ""
          - "To retrieve the root password later, run:"
          - "  cd ansible/scripts && ./get-gitlab-root-password.sh"
          - ""
          - "Note: Save these credentials securely!"
          - ""

    - name: Save GitLab credentials to temporary file
      ansible.builtin.copy:
        content: |
          GitLab Root Credentials
          ========================
          
          GitLab URL: {{ gitlab_url.stdout }}
          Registry URL: {{ gitlab_url.stdout | replace('gitlab.', 'registry.') }}
          
          Username: root
          Password: {{ current_root_password.stdout }}
          
          To retrieve the root password later, run:
            cd ansible/scripts && ./get-gitlab-root-password.sh
          
          Note: These credentials provide full administrative access to GitLab.
        dest: "{{ playbook_dir }}/../../.gitlab-credentials.txt"
        mode: '0600'

    - name: Display credentials file location
      ansible.builtin.debug:
        msg:
          - "Credentials have been saved to: {{ playbook_dir }}/../../.gitlab-credentials.txt"
          - ""

